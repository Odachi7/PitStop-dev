// Teste para verificar se super admin consegue deletar ve√≠culos
const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3000';

async function testSuperAdminDelete() {
  try {
    console.log('üîê Testando login do super admin...');
    
    // 1. Fazer login como super admin
    const loginResponse = await fetch(`${API_BASE}/api/auth-multi/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'admin@pitstop.com',
        password: 'admin123'
      })
    });

    const loginData = await loginResponse.json();
    
    if (!loginData.success) {
      console.error('‚ùå Erro no login:', loginData.error);
      return;
    }

    console.log('‚úÖ Login realizado com sucesso!');
    console.log('üë§ Role do usu√°rio:', loginData.user.role);
    console.log('üÜî User ID:', loginData.user.id);

    const token = loginData.token;

    // 2. Listar ve√≠culos para pegar um ID
    console.log('\nüìã Listando ve√≠culos...');
    const listResponse = await fetch(`${API_BASE}/api/vehicles-multi`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      }
    });

    const vehiclesData = await listResponse.json();
    
    if (!vehiclesData.success || !vehiclesData.data || vehiclesData.data.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum ve√≠culo encontrado para testar');
      
      // Criar um ve√≠culo de teste
      console.log('\nüöó Criando ve√≠culo de teste...');
      const createResponse = await fetch(`${API_BASE}/api/vehicles-multi`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: 'Ve√≠culo de Teste',
          price: 50000,
          brand: 'Toyota',
          model: 'Corolla',
          year: 2020,
          category: 'car',
          mileage: 50000,
          transmission: 'Automatic',
          fuel: 'Gasoline',
          color: 'Branco',
          doors: 4,
          location: 'S√£o Paulo',
          description: 'Ve√≠culo de teste para super admin'
        })
      });

      const createData = await createResponse.json();
      
      if (!createData.success) {
        console.error('‚ùå Erro ao criar ve√≠culo:', createData.error);
        return;
      }

      console.log('‚úÖ Ve√≠culo criado com sucesso!');
      console.log('üÜî ID do ve√≠culo:', createData.data.id);
      
      // Tentar deletar o ve√≠culo
      console.log('\nüóëÔ∏è  Tentando deletar ve√≠culo...');
      const deleteResponse = await fetch(`${API_BASE}/api/vehicles-multi/${createData.data.id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      const deleteData = await deleteResponse.json();
      
      if (deleteData.success) {
        console.log('‚úÖ Ve√≠culo deletado com sucesso pelo super admin!');
      } else {
        console.error('‚ùå Erro ao deletar ve√≠culo:', deleteData.error);
      }
      
    } else {
      // Usar o primeiro ve√≠culo da lista
      const vehicleId = vehiclesData.data[0].id;
      console.log(`üìã Usando ve√≠culo ID: ${vehicleId}`);
      
      // Tentar deletar o ve√≠culo
      console.log('\nüóëÔ∏è  Tentando deletar ve√≠culo...');
      const deleteResponse = await fetch(`${API_BASE}/api/vehicles-multi/${vehicleId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      const deleteData = await deleteResponse.json();
      
      if (deleteData.success) {
        console.log('‚úÖ Ve√≠culo deletado com sucesso pelo super admin!');
      } else {
        console.error('‚ùå Erro ao deletar ve√≠culo:', deleteData.error);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

testSuperAdminDelete();
